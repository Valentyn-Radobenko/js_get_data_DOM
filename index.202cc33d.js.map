{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCKA,IAAK,I,EAHC,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAyB,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IACnD,EAAc,EAAE,CAEb,EAAI,EAAG,EAAI,EAAmB,MAAM,CAAE,IAC7C,EAAY,IAAI,CAAC,CAAC,CAAkB,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAJtE,IAQM,EAAQ,EAAY,MAAM,CAAC,SAAC,CAAA,CAAK,CAAvC,EAA+C,OAAA,EAAM,C,GAC/C,EAAa,OAAO,GAAO,KAAK,CAAC,IACjC,EAAgB,EAAE,CAExB,OAAQ,EAAW,MAAM,CAAG,GAC1B,KAAK,EACH,EAAc,IAAI,CAAC,CAAU,CAAC,EAAE,EAChC,KACF,MAAK,EACH,EAAc,IAAI,CAAC,CAAU,CAAC,EAAE,CAAG,CAAU,CAAC,EAAE,CAEpD,CAEA,IAAK,IAAI,EAAI,EAAW,MAAM,CAAG,EAAG,EAAI,EAAW,MAAM,CAAE,GAAK,EAC9D,EAAc,IAAI,CAAC,CAAU,CAAC,EAAE,CAAG,CAAU,CAAC,EAAI,EAAE,CAAG,CAAU,CAAC,EAAI,EAAE,EAG1E,IAAM,EAAc,EAAc,IAAI,CAAC,KAKjC,EAAe,OADL,EAAQ,EAAY,MAAM,EACL,KAAK,CAAC,IACrC,EAAkB,EAAE,CAE1B,OAAQ,EAAa,MAAM,CAAG,GAC5B,KAAK,EACH,EAAgB,IAAI,CAAC,CAAY,CAAC,EAAE,EACpC,KACF,MAAK,EACH,EAAgB,IAAI,CAAC,CAAY,CAAC,EAAE,CAAG,CAAY,CAAC,EAAE,CAE1D,CAEA,IAAK,IAAI,EAAI,EAAa,MAAM,CAAG,EAAG,EAAI,EAAa,MAAM,CAAE,GAAK,EAClE,EAAgB,IAAI,CAClB,CAAY,CAAC,EAAE,CAAG,CAAY,CAAC,EAAI,EAAE,CAAG,CAAY,CAAC,EAAI,EAAE,EAI/D,IAAM,EAAgB,EAAgB,IAAI,CAAC,IAG3C,CAAA,SAAS,aAAa,CAAC,qBAAqB,WAAW,CAAG,EAC1D,SAAS,aAAa,CAAC,uBAAuB,WAAW,CAAG","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar populationsQueries = _to_consumable_array(document.querySelectorAll(\".population\"));\nvar populations = [];\nfor(var i = 0; i < populationsQueries.length; i++)populations.push(+populationsQueries[i].textContent.split(\",\").join(\"\"));\n// #region total\nvar total = populations.reduce(function(sum, num) {\n    return sum + num;\n});\nvar totalArray = String(total).split(\"\");\nvar totalStrArray = [];\nswitch(totalArray.length % 3){\n    case 1:\n        totalStrArray.push(totalArray[0]);\n        break;\n    case 2:\n        totalStrArray.push(totalArray[0] + totalArray[1]);\n        break;\n}\nfor(var i1 = totalArray.length % 3; i1 < totalArray.length; i1 += 3)totalStrArray.push(totalArray[i1] + totalArray[i1 + 1] + totalArray[i1 + 2]);\nvar totalString = totalStrArray.join(\",\");\n// #endregion\n// #region average\nvar average = total / populations.length;\nvar averageArray = String(average).split(\"\");\nvar averageStrArray = [];\nswitch(averageArray.length % 3){\n    case 1:\n        averageStrArray.push(averageArray[0]);\n        break;\n    case 2:\n        averageStrArray.push(averageArray[0] + averageArray[1]);\n        break;\n}\nfor(var i2 = averageArray.length % 3; i2 < averageArray.length; i2 += 3)averageStrArray.push(averageArray[i2] + averageArray[i2 + 1] + averageArray[i2 + 2]);\nvar averageString = averageStrArray.join(\",\");\n// #endregion\ndocument.querySelector(\".total-population\").textContent = totalString;\ndocument.querySelector(\".average-population\").textContent = averageString;\n\n//# sourceMappingURL=index.202cc33d.js.map\n","'use strict';\n\nconst populationsQueries = [...document.querySelectorAll('.population')];\nconst populations = [];\n\nfor (let i = 0; i < populationsQueries.length; i++) {\n  populations.push(+populationsQueries[i].textContent.split(',').join(''));\n}\n\n// #region total\nconst total = populations.reduce((sum, num) => sum + num);\nconst totalArray = String(total).split('');\nconst totalStrArray = [];\n\nswitch (totalArray.length % 3) {\n  case 1:\n    totalStrArray.push(totalArray[0]);\n    break;\n  case 2:\n    totalStrArray.push(totalArray[0] + totalArray[1]);\n    break;\n}\n\nfor (let i = totalArray.length % 3; i < totalArray.length; i += 3) {\n  totalStrArray.push(totalArray[i] + totalArray[i + 1] + totalArray[i + 2]);\n}\n\nconst totalString = totalStrArray.join(',');\n// #endregion\n\n// #region average\nconst average = total / populations.length;\nconst averageArray = String(average).split('');\nconst averageStrArray = [];\n\nswitch (averageArray.length % 3) {\n  case 1:\n    averageStrArray.push(averageArray[0]);\n    break;\n  case 2:\n    averageStrArray.push(averageArray[0] + averageArray[1]);\n    break;\n}\n\nfor (let i = averageArray.length % 3; i < averageArray.length; i += 3) {\n  averageStrArray.push(\n    averageArray[i] + averageArray[i + 1] + averageArray[i + 2],\n  );\n}\n\nconst averageString = averageStrArray.join(',');\n// #endregion\n\ndocument.querySelector('.total-population').textContent = totalString;\ndocument.querySelector('.average-population').textContent = averageString;\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","populationsQueries","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","populations","push","textContent","split","join","total","reduce","sum","num","totalArray","String","totalStrArray","i1","totalString","averageArray","averageStrArray","i2","averageString","querySelector"],"version":3,"file":"index.202cc33d.js.map"}